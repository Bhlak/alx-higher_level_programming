Importing function from module:
	  >>> BG = __import__("7-base_geometry").BaseGeometry

Checking Documentation
======================

Check if module has documentation
----------------------------------
	>>> mod = __import__("7-base_geometry").__doc__
	>>> len(mod) > 1
	True

Check if class has documentation
--------------------------------
	>>> cla = __import__("7-base_geometry").BaseGeometry.__doc__
	>>> len(cla) > 1
	True

Check if functions have documentation
-------------------------------------
	>>> ar = __import__("7-base_geometry").BaseGeometry.area.__doc__
	>>> len(ar) > 1
	True

	>>> val = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
	>>> len(val) > 1
	True

Checking Area Method
====================

Check for failure
-----------------
	>>> bas = BG()
	>>> bas.area()
	Traceback (most recent call last):
	...
	Exception: area() is not implemented

Check for too many arguments
----------------------------
	>>> bas.area(3)
	Traceback (most recent call last):
	...
	TypeError: area() takes 1 positional argument but 2 were given

Checking Integer Validator Method
=================================

Check for value being an integer
--------------------------------
	>>> bas.integer_validator("boss", 10)

Check for value being less than 0
---------------------------------
	>>> bas.integer_validator("less", -5)
	Traceback (most recent call last):
	...
	ValueError: less must be greater than 0

Check for value being equal to 0
--------------------------------
	>>> bas.integer_validator("equal", 0)
	Traceback (most recent call last):
	...
	ValueError: equal must be greater than 0

Check for value not being an integer
------------------------------------
Float:
	>>> bas.integer_validator("float", 3.2)
	Traceback (most recent call last):
	...
	TypeError: float must be an integer

String:
	>>> bas.integer_validator("string", "bot")
	Traceback (most recent call last):
	...
	TypeError: string must be an integer

Boolean:
	>>> bas.integer_validator("bool", False)
	Traceback (most recent call last):
	...
	TypeError: bool must be an integer

Complex:
	>>> bas.integer_validator("complex", complex(1,1))
	Traceback (most recent call last):
	...
	TypeError: complex must be an integer

Tuple:
	>>> bas.integer_validator("tuple", (1, 2))
	Traceback (most recent call last):
	...
	TypeError: tuple must be an integer

List:
	>>> bas.integer_validator("list", [1, 2, 3])
	Traceback (most recent call last):
	...
	TypeError: list must be an integer

Dict:
	>>> bas.integer_validator("dict", {"key": "value"})
	Traceback (most recent call last):
	...
	TypeError: dict must be an integer

Set:
	>>> bas.integer_validator("set", {"apple", "banana"})
	Traceback (most recent call last):
	...
	TypeError: set must be an integer

Frozenset:
	>>> bas.integer_validator("frozenset", frozenset(["hello", "world"]))
	Traceback (most recent call last):
	...
	TypeError: frozenset must be an integer

Bytes:
	>>> bas.integer_validator("bytearrays", bytearray(b"bytes"))
	Traceback (most recent call last):
	...
	TypeError: bytearrays must be an integer

Float:
	>>> bas.integer_validator("float", 3.2)
	Traceback (most recent call last):
	...
	TypeError: float must be an integer

String:
	>>> bas.integer_validator("string", "bot")
	Traceback (most recent call last):
	...
	TypeError: string must be an integer

Checking for no arguments to integer_validator
----------------------------------------------
	  >>> bas.integer_validator()
	  Traceback (most recent call last):
          ...
	  TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Checking for only 1 argument to integer_validator
-------------------------------------------------
	  >>> bas.integer_validator("integer")
	  Traceback (most recent call last):
          ...
	  TypeError: integer_validator() missing 1 required positional argument: 'value'

Checking for too many arguments
-------------------------------
	  >>> bas.integer_validator("integer", 1, 2)
	  Traceback (most recent call last):
          ...
	  TypeError: integer_validator() takes 3 positional arguments but 4 were given
